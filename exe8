#include <iostream>
#include <mpi.h>
#include <cmath>

int rank, size;
constexpr int p_count = 512;

double modulus(double x, double y) {
  return sqrt(x * x + y * y);
}

void self_mul(double &x, double &y) {
  double ox = x * x - y * y;
  double oy = x * y + y * x;
  x = ox;
  y = oy;
}

void compute_mandelbrot(double *points, int npts, int mset[]) {
  for (int i = 0; i < npts; ++i) {
    double px, py;
    px = points[i * 2];
    py = points[i * 2 + 1];

    int iteration = 0;
    double zx = 0;
    double zy = 0;

    while (iteration < p_count) {
      self_mul(zx, zy);
      zx += px;
      zy += py;
      double mod = modulus(zx, zy);

      if (mod > 2.0f)
        break;

      iteration++;
    }

    if (iteration == p_count)
      mset[i] = -1;
    else
      mset[i] = iteration;
  }
}

int main(int argc, char **argv) {
  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  double min_x, max_x, min_y, max_y, dx, dy;
  int cutoff;

  if (rank == 0) {
    // Reading the parameters on the command line
    min_x = std::stod(argv[1]);
    max_x = std::stod(argv[2]);
    min_y = std::stod(argv[3]);
    max_y = std::stod(argv[4]);
    dx = max_x - min_x;
    dy = max_y - min_y;
    cutoff = std::stoi(argv[5]);
  }

  MPI_Bcast(&min_x, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&max_x, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&min_y, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&max_y, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&dx, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&dy, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  MPI_Bcast(&cutoff, 1, MPI_INT, 0, MPI_COMM_WORLD);

  // Initialisation of the points :
  double *points = nullptr;
  int npts;

  if (rank == 0) {
    npts = p_count * p_count;
    points = new double[npts * 2];

    for (int yp = 0; yp < p_count; ++yp) {
      double py = min_y + dy * yp / p_count;
      for (int xp = 0; xp < p_count; ++xp) {
        double px = min_x + dx * xp / p_count;

        int lid = yp * p_count * 2 + xp * 2;
        points[lid] = px;
        points[lid + 1] = py;
      }
    }
  }

  MPI_Bcast(&npts, 1, MPI_INT, 0, MPI_COMM_WORLD);

  int local_npts = npts / size;
  double *local_points = new double[local_npts * 2];
  MPI_Scatter(points, local_npts * 2, MPI_DOUBLE, local_points, local_npts * 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);

  int *local_mset = new int[local_npts];
  compute_mandelbrot(local_points, local_npts, local_mset);

  int *global_mset = nullptr;
  if (rank == 0) {
    global_mset = new int[npts];
  }

  MPI_Gather(local_mset, local_npts, MPI_INT, global_mset, local_npts, MPI_INT, 0, MPI_COMM_WORLD);

  if (rank == 0) {
    for (int yp = 0; yp < p_count; ++yp) {
      for (int xp = 0; xp < p_count; ++xp)
        std::cout << global_mset[yp * p_count + xp] << " ";
      std::cout << std::endl;
    }
  }

  delete[] points;
  delete[] local_points;
  delete[] local_mset;
  if (rank == 0) {
    delete[] global_mset;
  }

  MPI_Finalize();
  return 0;
}
